apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config

          # --- NEW: let DNS/DB become reachable before we go Ready ---
          # Startup: wait for DNS resolution of POSTGRES_HOST
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  python - <<'PY'
                  import os, socket, sys, time
                  h=os.environ.get("POSTGRES_HOST","")
                  if not h: sys.exit(1)
                  ok=False
                  for _ in range(60):
                      try:
                          socket.getaddrinfo(h, None); ok=True; break
                      except Exception: time.sleep(3)
                  sys.exit(0 if ok else 1)
                  PY
            failureThreshold: 30
            periodSeconds: 6

          # Readiness: DB TCP reachable (resolver + SG + instance up)
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  python - <<'PY'
                  import os, socket, sys
                  h=os.environ.get("POSTGRES_HOST",""); p=int(os.environ.get("POSTGRES_PORT","5432"))
                  try:
                      s=socket.socket(); s.settimeout(3.0); s.connect((h,p)); s.close(); sys.exit(0)
                  except Exception: sys.exit(1)
                  PY
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 12

          # Liveness: app HTTP responds on service port
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.port }}
            initialDelaySeconds: 20
            periodSeconds: 10
